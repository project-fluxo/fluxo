# =================================================================================================================================
# Stages to be executed, each stage is a collection of jobs pointing to the stage
# =================================================================================================================================

stages:
  - startup
  - gnu_build
  - intel_build
  - gnu_short_runs
  - intel_short_runs
  - cleanup

# =================================================================================================================================
# GLOBALS
# =================================================================================================================================

variables:
  GIT_STRATEGY: none
  GLOBAL_CACHE_PATH: "/home/gitlab-runner/globalcache/${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}"

# =================================================================================================================================
# SHORT SYNTAX EXPLANATIONS FOR THE JOB, FOR DETAILS VISIT:    ===> https://docs.gitlab.com/ce/ci/yaml/   <===
# "stage:"         makes the job part of a stage defined above
# "tags:"          selects the runner
# "only:"          restricts the execution of the job to a git branch or tag
# "before_script:" shell commands to be executed before the main script. 
# "script:"        shell commands for the test. If a shell command exits with >0, the job is marked as "failed", else as "passed".
#                  commands after a failing one are not executed anymore!
# "after_script:"  shell commands after passed OR failed script. Careful, the current directory is always the root of the repo!
# "artifacts:"     keep data from the job which is uploaded to gitlab.com. You really should set a duration to expiration.
#                  "when:" can be either on_failure, on_success or always
# =================================================================================================================================
# =================================================================================================================================
# TEMPLATES FOR STAGE "startup"
# =================================================================================================================================

.job_template: &IPP_job_startup
  stage: startup 
  tags:
    - ipp_vm_linux_fluxo
  script:
    - echo "IPP RUNNER WARM-UP"

.job_template: &PCM_job_startup
  stage: startup 
  tags:
    - pcm_linux_fluxo
  script:
    - echo "PCM RUNNER WARM-UP"

# =================================================================================================================================
# TEMPLATES FOR STAGE "build"
# =================================================================================================================================

# NOTE: _ipp is the runner testimony_fluxo , with tag: IPP_vm_linux_fluxo
#       _pcm is the runner fluxo@gitlab.mi.uni-koeln.de with tag: PCM_linux_fluxo

.job_template: &IPP_setup_intel_build
  stage: intel_build 
  variables:
    GIT_STRATEGY: clone
    CURR_CMP: intel
  tags:
    - ipp_vm_linux_fluxo
  before_script:
    - pwd
    - echo "create" ${GLOBAL_CACHE_PATH}_${CURR_CMP} 
    - mkdir -p ${GLOBAL_CACHE_PATH}_${CURR_CMP}  
    - . ~/environments/modules_for_fluxo_intel ; pwd
  after_script:
    - pwd 

.job_template: &IPP_setup_gnu_build
  stage: gnu_build 
  variables:
    GIT_STRATEGY: clone
    CURR_CMP: gnu
  tags:
    - ipp_vm_linux_fluxo
  before_script:
    - pwd
    - echo "create" ${GLOBAL_CACHE_PATH}_${CURR_CMP} 
    - mkdir -p ${GLOBAL_CACHE_PATH}_${CURR_CMP} 
    - . ~/environments/modules_for_fluxo_gnu ; pwd
  after_script:
    - pwd 

.job_template: &PCM_setup_gnu_build
  stage: gnu_build 
  variables:
    GIT_STRATEGY: clone
    CURR_CMP: gnu
  tags:
    - pcm_linux_fluxo
  before_script:
    - pwd
    - echo "create" ${GLOBAL_CACHE_PATH}_${CURR_CMP} 
    - mkdir -p ${GLOBAL_CACHE_PATH}_${CURR_CMP}  
  after_script:
    - pwd 

#--------------------------------------------------------------------------------------------------------------------------------

.job_template: &job_script_build_linadv
  script: 
    - cd tests; pwd
    - rm -rf dirx_1* log_1*.txt
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 100-199 
    - else python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 101,103 ;  fi
    - mv dirx_1* ${GLOBAL_CACHE_PATH}_${CURR_CMP}/.
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/log_1*.txt

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_build_maxwell
  script: 
    - cd tests; pwd
    - rm -rf dirx_2* log_2*
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 200-299 
    - else python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 201 ;  fi
    - mv dirx_2* ${GLOBAL_CACHE_PATH}_${CURR_CMP}/.
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/log_2*.txt

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_build_mhd
  script: 
    - cd tests; pwd
    - rm -rf dirx_3* log_3*
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 300-399 
    - else python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 301,304 ;  fi
    - mv dirx_3* ${GLOBAL_CACHE_PATH}_${CURR_CMP}/.
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/log_3*.txt

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_build_nav-st
  script: 
    - cd tests; pwd
    - rm -rf dirx_4* log_4*
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 400-499 
    - else python build_tests.py -p 2 -stage 0 -buildhdf5 0 -case 401,403 ;  fi
    - mv dirx_4* ${GLOBAL_CACHE_PATH}_${CURR_CMP}/.
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/log_4*.txt

# =================================================================================================================================
# TEMPLATES FOR STAGE "short_runs"
# =================================================================================================================================

.job_template: &IPP_setup_intel_short_runs
  stage: intel_short_runs 
  variables:
    CURR_CMP: intel
  tags:
    - ipp_vm_linux_fluxo
  before_script:
    - . ~/environments/modules_for_fluxo_intel ; pwd
  after_script:
    - pwd 

.job_template: &IPP_setup_gnu_short_runs
  stage: gnu_short_runs 
  variables:
    CURR_CMP: gnu
  tags:
    - ipp_vm_linux_fluxo
  before_script:
    - . ~/environments/modules_for_fluxo_gnu ; pwd
  after_script:
    - pwd 

.job_template: &PCM_setup_gnu_short_runs
  stage: gnu_short_runs 
  variables:
    CURR_CMP: gnu
  tags:
    - pcm_linux_fluxo
  before_script:
    - pwd
  after_script:
    - pwd 

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_short_runs_linadv
  script: 
    - cd tests; pwd
    - rm -f freestream/log_1*.txt
    - rm -rf dirx_1* ; mv ${GLOBAL_CACHE_PATH}_${CURR_CMP}/dirx_1* . 
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 2 -case 100-199 
    - else python build_tests.py -p 2 -stage 2 -case 101,103 ;  fi
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/freestream/log_LINADV*.txt

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_short_runs_mhd
  script: 
    - cd tests; pwd
    - rm -f freestream/log_3*.txt
    - rm -rf dirx_3*; mv ${GLOBAL_CACHE_PATH}_${CURR_CMP}/dirx_3* . 
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 2 -case 300-399 
    - else python build_tests.py -p 2 -stage 2 -case 301,304 ;  fi
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/freestream/log_MHD*.txt

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_short_runs_nav-st
  script: 
    - cd tests; pwd
    - rm -f freestream/log_4*.txt
    - rm -rf dirx_4* ; mv ${GLOBAL_CACHE_PATH}_${CURR_CMP}/dirx_4* . 
    - if [ -n "${NIGHTLY_RUNNER}" ]; then python build_tests.py -p 2 -stage 2 -case 400-499 
    - else python build_tests.py -p 2 -stage 2 -case 401,403 ;  fi
  artifacts:
    name: "${CI_PIPELINE_ID}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME}"
    expire_in: 2 days
    when: on_failure
    paths:
    - tests/freestream/log_NAVIERSTOKES*.txt

# =================================================================================================================================
# TEMPLATES FOR STAGE "cleanup"
# =================================================================================================================================

.job_template: &IPP_setup_intel_cleanup
  stage: cleanup 
  variables:
    CURR_CMP: intel
  tags:
    - ipp_vm_linux_fluxo

.job_template: &IPP_setup_gnu_cleanup
  stage: cleanup 
  variables:
    CURR_CMP: gnu
  tags:
    - ipp_vm_linux_fluxo

.job_template: &PCM_setup_gnu_cleanup
  stage: cleanup 
  variables:
    CURR_CMP: gnu
  tags:
    - pcm_linux_fluxo

#--------------------------------------------------------------------------------------------------------------------------------
.job_template: &job_script_cleanup
  when: always
  script:
    - pwd
    - echo "remove:" ${GLOBAL_CACHE_PATH}_${CURR_CMP}
    - rm -rf ${GLOBAL_CACHE_PATH}_${CURR_CMP}


###################################################################################################################################
# JOB DEFINITIONS
# HERE, the "needs:" command is used to generate a dependency for each job. 
#                    - the startup job does nothing except checking if the gitlab runner is listening.
#                    - this way, all the remainingjobs can be executed only in their dependency order,
#                      and thus before the whole stage is ready (even jump over stages)
###################################################################################################################################

# =================================================================================================================================
# Stage "startup"
# =================================================================================================================================
IPP_startup:
  <<: *IPP_job_startup

PCM_startup:
  <<: *PCM_job_startup

# =================================================================================================================================
# Stage "build"
# =================================================================================================================================

IPP_gnu_build_mhd:
  needs: ["IPP_startup"]
  <<: *IPP_setup_gnu_build
  <<: *job_script_build_mhd

IPP_intel_build_mhd:
  needs: ["IPP_startup"]
  <<: *IPP_setup_intel_build
  <<: *job_script_build_mhd

PCM_gnu_build_mhd:
  needs: ["PCM_startup"]
  <<: *PCM_setup_gnu_build
  <<: *job_script_build_mhd

#--------------------------------------------------------------------------------------------------------------------------------

IPP_gnu_build_linadv:
  needs: ["IPP_startup"]
  <<: *IPP_setup_gnu_build 
  <<: *job_script_build_linadv

IPP_intel_build_linadv:
  needs: ["IPP_startup"]
  <<: *IPP_setup_intel_build 
  <<: *job_script_build_linadv

PCM_gnu_build_linadv:
  needs: ["PCM_startup"]
  <<: *PCM_setup_gnu_build 
  <<: *job_script_build_linadv

#--------------------------------------------------------------------------------------------------------------------------------

IPP_gnu_build_maxwell:
  needs: ["IPP_startup"]
  <<: *IPP_setup_gnu_build
  <<: *job_script_build_maxwell

IPP_intel_build_maxwell:
  needs: ["IPP_startup"]
  <<: *IPP_setup_intel_build
  <<: *job_script_build_maxwell

PCM_gnu_build_maxwell:
  needs: ["PCM_startup"]
  <<: *PCM_setup_gnu_build
  <<: *job_script_build_maxwell

#--------------------------------------------------------------------------------------------------------------------------------

IPP_gnu_build_nav-st:
  needs: ["IPP_startup"]
  <<: *IPP_setup_gnu_build
  <<: *job_script_build_nav-st

IPP_intel_build_nav-st:
  needs: ["IPP_startup"]
  <<: *IPP_setup_intel_build
  <<: *job_script_build_nav-st

PCM_gnu_build_nav-st:
  needs: ["PCM_startup"]
  <<: *PCM_setup_gnu_build
  <<: *job_script_build_nav-st

# =================================================================================================================================
# Stage "short_runs"
# =================================================================================================================================

IPP_gnu_short_runs_mhd:
  needs: ["IPP_gnu_build_mhd"]
  <<: *IPP_setup_gnu_short_runs
  <<: *job_script_short_runs_mhd

IPP_intel_short_runs_mhd:
  needs: ["IPP_intel_build_mhd"]
  <<: *IPP_setup_intel_short_runs
  <<: *job_script_short_runs_mhd

PCM_gnu_short_runs_mhd:
  needs: ["PCM_gnu_build_mhd"]
  <<: *PCM_setup_gnu_short_runs
  <<: *job_script_short_runs_mhd

#--------------------------------------------------------------------------------------------------------------------------------

IPP_gnu_short_runs_linadv:
  needs: ["IPP_gnu_build_linadv"]
  <<: *IPP_setup_gnu_short_runs
  <<: *job_script_short_runs_linadv

IPP_intel_short_runs_linadv:
  needs: ["IPP_intel_build_linadv"]
  <<: *IPP_setup_intel_short_runs
  <<: *job_script_short_runs_linadv

PCM_gnu_short_runs_linadv:
  needs: ["PCM_gnu_build_linadv"]
  <<: *PCM_setup_gnu_short_runs
  <<: *job_script_short_runs_linadv

#--------------------------------------------------------------------------------------------------------------------------------

IPP_gnu_short_runs_nav-st:
  needs: ["IPP_gnu_build_nav-st"]
  <<: *IPP_setup_gnu_short_runs
  <<: *job_script_short_runs_nav-st

IPP_intel_short_runs_nav-st:
  needs: ["IPP_intel_build_nav-st"]
  <<: *IPP_setup_intel_short_runs
  <<: *job_script_short_runs_nav-st

PCM_gnu_short_runs_nav-st:
  needs: ["PCM_gnu_build_nav-st"]
  <<: *PCM_setup_gnu_short_runs
  <<: *job_script_short_runs_nav-st

# =================================================================================================================================
# Stage "cleanup"
# =================================================================================================================================

IPP_gnu_cleanup_cache:
  needs: ["IPP_gnu_short_runs_linadv","IPP_gnu_short_runs_mhd","IPP_gnu_short_runs_nav-st"]
  <<: *IPP_setup_gnu_cleanup
  <<: *job_script_cleanup

IPP_intel_cleanup_cache:
  needs: ["IPP_intel_short_runs_linadv","IPP_intel_short_runs_mhd","IPP_intel_short_runs_nav-st"]
  <<: *IPP_setup_intel_cleanup
  <<: *job_script_cleanup

PCM_gnu_cleanup_cache:
  needs: ["PCM_gnu_short_runs_linadv","PCM_gnu_short_runs_mhd","PCM_gnu_short_runs_nav-st"]
  <<: *PCM_setup_gnu_cleanup
  <<: *job_script_cleanup
