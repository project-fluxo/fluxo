4,9c4,10
< # NOTE: use minimum CMake version required by tools/libs (Paraview, HDF5, FFTW)
< CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)
< # Policies (see https://cmake.org/cmake/help/v3.8/manual/cmake-policies.7.html)
< cmake_policy (SET CMP0045 OLD)
< cmake_policy (SET CMP0046 OLD)
< # Folder for custom CMake source files
---
> CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)
> # TODO: eventually require CMake 3.0 in future releases
> # Advantages: Possible to split string
> IF ("${CMAKE_VERSION}" VERSION_GREATER 3.0.0)
>   cmake_policy (SET CMP0045 OLD)
>   cmake_policy (SET CMP0046 OLD)
> ENDIF()
15,28c16
< # =========================================================================
< # Check whether we are using Git ssh or https
< # =========================================================================
< EXECUTE_PROCESS(COMMAND git ls-remote --get-url OUTPUT_VARIABLE GIT_ORIGIN)
< STRING(FIND "${GIT_ORIGIN}" "git@" USESSH)
< IF(USESSH EQUAL 0)
<   SET(FLUXO_DLPATH "git@github.com:project-fluxo")
< ELSE()
<   SET(FLUXO_DLPATH "https://github.com/project-fluxo")
< ENDIF()
< SET (HDF5DOWNLOAD https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git )
< SET (HDF5TAG "hdf5-1_10_1" CACHE STRING "HDF5 version tag")
< SET (P4ESTDOWNLOAD https://github.com/cburstedde/p4est.git )
< SET (P4ESTSHA "7ce0525ffcd3f9cd0f5834604434b1d9b4e1ba57" CACHE STRING "P4EST commit SHA")
---
> 
31c19
< # Detect machine environements
---
> # Detect machine environments
54c42
< ENABLE_LANGUAGE(Fortran C CXX)
---
> ENABLE_LANGUAGE(Fortran)
83c71
< SUBDIRLIST(TESTCASES  ${CMAKE_CURRENT_SOURCE_DIR}/src/testcase/)
---
> 
84a73
> SUBDIRLIST(TESTCASES  ${CMAKE_CURRENT_SOURCE_DIR}/src/testcase/)
91,92c80
< OPTION(FLUXO_BUILD_HDF5 "Compile and build HDF5 library" OFF)
< OPTION(FLUXO_AMR        "Compile and build with p4est / AMR support" ON)
---
> OPTION(FLUXO_BUILD_HDF5 "Compile and build hdf5 library" OFF)
97c85
<                         "Choice of equation system (linearscalaradvection/navierstokes/mhd/maxwell)" )
---
>                         "Choice of equation system (lienarscalaradvection/navierstokes/mhd/maxwell)" )
118,122d105
< SET(FLUXO_DISC_CARTESIANFLUX  OFF  CACHE BOOL "switch on only if cartesian meshes are used.")
< IF(FLUXO_DISC_CARTESIANFLUX)
<   ADD_DEFINITIONS(-DCARTESIANFLUX=${FLUXO_DISC_CARTESIANFLUX} )
< ENDIF()
< 
132d114
< ##### Node type
134c116
< SET_PROPERTY(CACHE FLUXO_DISC_NODETYPE PROPERTY STRINGS "GAUSS" "GAUSS-LOBATTO")
---
> SET_PROPERTY(CACHE FLUXO_DISC_NODETYPE PROPERTY STRINGS GAUSS GAUSS-LOBATTO)
140c122
<   MESSAGE(SEND_ERROR "No such node type known.")
---
>   MESSAGE(ERROR " No such node type known.")
145c127
<     MESSAGE(SEND_ERROR " Split form discretization (DiscType=2) + Gauss nodes is not possible! Choose either DiscType=2 + Gauss-Lob., or DiscType=1 + Gauss / Gauss-Lob. ")
---
>     MESSAGE(ERROR " Split form discretization (DiscType=2) + Gauss nodes is not possible! Choose either DiscType=2 + Gauss-Lob., or DiscType=1 + Gauss / Gauss-Lob. ")
149,154c131,133
< IF(FLUXO_AMR)
<   ADD_DEFINITIONS(-DUSE_AMR=1)
<   CMAKE_DEPENDENT_OPTION(FLUXO_BUILD_P4EST "Build p4est library" ON "FLUXO_AMR" OFF)
< ELSE()
<   ADD_DEFINITIONS(-DUSE_AMR=0)
< ENDIF()
---
> # Enable or disable unit tests
> #OPTION(FLUXO_UNITTESTS "Enable unit tests after build" ON)
> #MARK_AS_ADVANCED(FLUXO_UNITTESTS)
182a162,169
>   IF(FLUXO_DISCTYPE EQUAL 2)
>     SET(FLUXO_EQN_NONCONS  ON  CACHE BOOL "switch on/off non-conservative source term for mhd.")
>     IF(FLUXO_EQN_NONCONS)
>       ADD_DEFINITIONS(-DNONCONS=1)
>     ENDIF()
>   ELSE()
>     UNSET(FLUXO_EQN_NONCONS CACHE ) #if not mhd
>   ENDIF()
189a177
>   UNSET(FLUXO_EQN_NONCONS CACHE ) #if not mhd
196c184
<     MESSAGE(SEND_ERROR " Do not use parabolic flag with maxwell equation system!")
---
>     MESSAGE(ERROR " Do not use parabolic flag with maxwell equation system!")
202c190
<   MESSAGE(SEND_ERROR " This equation system does not appear in CMakeLists.txt!")
---
>   MESSAGE(ERROR " This equation system does not appear in CMakeLists.txt!")
212c200
<   SET(FLUXO_PARABOLIC_LIFTING "br2" CACHE STRING "Lifting method used for PARABOLIC")
---
>   SET(FLUXO_PARABOLIC_LIFTING "br1" CACHE STRING "Lifting method used for PARABOLIC")
214a203,211
>   SET(FLUXO_PARABOLIC_LIFTING_VAR "cons_var" CACHE STRING "variable used for BR1 lifting, cons/prim/entropy_var: conservative/primitive/entropy variables.")
>   SET_PROPERTY(CACHE FLUXO_PARABOLIC_LIFTING_VAR PROPERTY STRINGS cons_var prim_var entropy_var)
>   IF(FLUXO_PARABOLIC_LIFTING_VAR STREQUAL "cons_var")
>     ADD_DEFINITIONS(-DPP_Lifting_Var=1)
>   ELSEIF(FLUXO_PARABOLIC_LIFTING_VAR STREQUAL "prim_var")
>     ADD_DEFINITIONS(-DPP_Lifting_Var=2)
>   ELSEIF(FLUXO_PARABOLIC_LIFTING_VAR STREQUAL "entropy_var")
>     ADD_DEFINITIONS(-DPP_Lifting_Var=3)
>   ENDIF()
220c217
<     MESSAGE(SEND_ERROR " No such LIFTING known.")
---
>     MESSAGE(ERROR " No such LIFTING known.")
223c220
<   #### Set the law for viscosity
---
>   #### Set the viscosity
235c232
<       MESSAGE(SEND_ERROR " No such VISCOSITY known.")
---
>       MESSAGE(ERROR " No such VISCOSITY known.")
241,242c238,241
<   UNSET(FLUXO_EQN_VISCOSITY CACHE ) #if not parabolic & not navierstokes
<   UNSET(FLUXO_PARABOLIC_LIFTING CACHE ) #if not parabolic
---
>   #if not parabolic
>   UNSET(FLUXO_PARABOLIC_LIFTING_VAR CACHE )
>   UNSET(FLUXO_EQN_VISCOSITY CACHE ) 
>   UNSET(FLUXO_PARABOLIC_LIFTING CACHE )
246,268d244
< # =========================================================================
< # CMake option output
< # =========================================================================
< 
< # A function to get all user defined variables with a specified prefix
< function (getListOfVarsStartingWith _prefix _varResult)
<     GET_CMAKE_PROPERTY(_vars CACHE_VARIABLES)
<     STRING(REGEX MATCHALL "(^|;)${_prefix}[A-Za-z0-9_]*" _matchedVars "${_vars}")
<     SET(${_varResult} ${_matchedVars} PARENT_SCOPE)
< endfunction()
< 
< # A function to get all user defined variables with a specified prefix
< SET(configuration ${CMAKE_Fortran_MODULE_DIRECTORY}/configuration-cmake.f90)
< FILE(WRITE ${configuration} "!This file is included during compilation in fluxo.f90 to show the configuration on the screen output. \n")
< FILE(APPEND ${configuration} "  WRITE(UNIT_stdOut,'(A)') \" THIS IS AN OUTPUT OF THE FLUXO OPTIONS USED IN CMAKE:\" \n")
< GETLISTOFVARSSTARTINGWITH("FLUXO_" fluxoVars)
< FOREACH (_var IN LISTS fluxoVars)
<   GET_PROPERTY(currentHelpString CACHE "${_var}" PROPERTY HELPSTRING)
<   IF(${_var})
<     STRING(REPLACE "\\" "\\\\" ${_var} ${${_var}})
<   ENDIF()
<   FILE(APPEND ${configuration} "  WRITE(UNIT_stdOut,'(A18,A30,A3,A40)')  \"   CMAKE-OPTION : \",\" ${_var} \",\" : \",\"${${_var}}\"\n")
< ENDFOREACH()
294c270
< ADD_DEFINITIONS("-DBASEDIR='\"${CMAKE_CURRENT_BINARY_DIR}/\"'")
---
> #ADD_DEFINITIONS("-DBASEDIR='\"${CMAKE_CURRENT_BINARY_DIR}/\"'")
302a279
> 
316c293
<   SET (FLUXO_COMPILE_FLAGS "-xf95-cpp-input -fPIC")
---
>   SET (FLUXO_COMPILE_FLAGS "-xf95-cpp-input")
333c310
<    SET (FLUXO_COMPILE_FLAGS "-fpp -allow nofpp_comments -assume bscc")
---
>    SET (FLUXO_COMPILE_FLAGS "-fpp -assume bscc")
345c322
<   MESSAGE(SEND_ERROR "Unknown compiler")
---
>    MESSAGE(ERROR " Unknown compiler")
351,368d327
< IF(FLUXO_BUILD_MPI)
<   SET(FLUXO_FC  ${MPI_Fortran_COMPILER})
<   SET(FLUXO_CC  ${MPI_C_COMPILER})
<   SET(FLUXO_CXX ${MPI_CXX_COMPILER})
< ELSE()
<   SET(FLUXO_FC  ${CMAKE_Fortran_COMPILER})
<   SET(FLUXO_CC  ${CMAKE_C_COMPILER} )
<   SET(FLUXO_CXX ${CMAKE_CXX_COMPILER} )
< ENDIF()
< SET(FLUXO_COMPILERS FC=${FLUXO_FC} CC=${FLUXO_CC} CXX=${FLUXO_CXX})
< 
< 
< IF(FLUXO_BUILD_MPI)
<   SET(FLUXO_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID}-MPI)
< ELSE()
<   SET(FLUXO_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID})
< ENDIF()
< MARK_AS_ADVANCED(FLUXO_EXTERNAL_LIB_DIR)
370,396c329,331
< # =========================================================================
< # p4est library
< # =========================================================================
< 
< IF(FLUXO_AMR)
<   IF(FLUXO_BUILD_P4EST)
<     SET(FLUXO_P4EST_DLDIR ${FLUXO_EXTERNAL_LIB_DIR}/P4EST)
<     SET(FLUXO_P4EST_DIR  ${FLUXO_P4EST_DLDIR}/build)
<     IF (NOT EXISTS "${FLUXO_P4EST_DIR}/lib/libp4est.a")
<       IF(FLUXO_BUILD_MPI)
<         SET(FLUXO_P4ESTPARALLEL --enable-mpi)
<       ELSE()
<         UNSET(FLUXO_P4ESTPARALLEL)
<       ENDIF()
<       ExternalProject_Add(P4EST
<         GIT_REPOSITORY ${P4ESTDOWNLOAD}
<         GIT_TAG ${P4ESTTAG}
<         PREFIX ${FLUXO_P4EST_DIR}
<         UPDATE_COMMAND "${FLUXO_P4EST_DIR}/src/P4EST/bootstrap"
<         CONFIGURE_COMMAND ${FLUXO_COMPILERS} ${FLUXO_P4EST_DIR}/src/P4EST/configure --prefix=${FLUXO_P4EST_DIR} --with-pic ${FLUXO_P4ESTPARALLEL}
<         BUILD_COMMAND ${MAKE}
<       )
<     ENDIF()
<     UNSET(P4EST_LIBRARIES)
<     UNSET(P4EST_INCLUDE_DIRS)
<     LIST(APPEND P4EST_LIBRARIES    ${FLUXO_P4EST_DIR}/lib/libp4est.a; ${FLUXO_P4EST_DIR}/lib/libsc.a)
<     LIST(APPEND P4EST_INCLUDE_DIRS ${FLUXO_P4EST_DIR}/include )
---
> IF(FLUXO_BUILD_HDF5)
>   IF(FLUXO_BUILD_MPI)
>     SET(FLUXO_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID}-MPI)
398c333
<     FIND_PACKAGE(p4est)
---
>     SET(FLUXO_EXTERNAL_LIB_DIR ${CMAKE_CURRENT_SOURCE_DIR}/share/${CMAKE_Fortran_COMPILER_ID})
400,402c335,336
<   
<   INCLUDE_DIRECTORIES(${P4EST_INCLUDE_DIRS})
<   LIST(APPEND linkedlibs ${P4EST_LIBRARIES} -ldl)
---
> ELSE()
>   UNSET(FLUXO_EXTERNAL_LIB_DIR CACHE ) 
403a338
> MARK_AS_ADVANCED(FLUXO_EXTERNAL_LIB_DIR)
421a357,358
>   UNSET(HDF5TAG CACHE ) #if not build hdf5
>   UNSET(HDF5DOWNLOAD CACHE ) #if not build hdf5
423a361,362
>   UNSET(FLUXO_HDF5FC CACHE ) 
>   UNSET(FLUXO_HDF5CC CACHE ) 
424a364,366
>   # define here the path to download from
>   SET (HDF5DOWNLOAD https://bitbucket.hdfgroup.org/scm/hdffv/hdf5.git )
>   SET (HDF5TAG "hdf5-1_10_0-patch1" CACHE STRING "HDF5 version tag")
430a373,374
>       SET(FLUXO_HDF5FC ${MPI_Fortran_COMPILER})
>       SET(FLUXO_HDF5CC ${MPI_C_COMPILER})
432a377,378
>       SET(FLUXO_HDF5FC ${CMAKE_Fortran_COMPILER})
>       SET(FLUXO_HDF5CC ${CMAKE_C_COMPILER} )
440c386
<       CONFIGURE_COMMAND ${FLUXO_COMPILERS} ${FLUXO_HDF5_DIR}/src/HDF5/configure --prefix=${FLUXO_HDF5_DIR} --with-pic --enable-fortran ${FLUXO_HDF5PARALLEL} --disable-shared --libdir=${FLUXO_HDF5_DIR}/lib
---
>       CONFIGURE_COMMAND FC=${FLUXO_HDF5FC} CC=${FLUXO_HDF5CC} ${FLUXO_HDF5_DIR}/src/HDF5/configure --prefix=${FLUXO_HDF5_DIR} --enable-fortran ${FLUXO_HDF5PARALLEL} --disable-shared --libdir=${FLUXO_HDF5_DIR}/lib
442a389,397
>     # CMake HDF5 is fast but not that reliable
>     #ExternalProject_Add(HDF5
>     #  GIT_REPOSITORY ${HDF5DOWNLOAD}
>     #  GIT_TAG ${HDF5TAG}
>     #  PREFIX ${FLUXO_HDF5_DIR}
>     #  UPDATE_COMMAND ""
>     #  CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${FLUXO_HDF5_DIR} -DCMAKE_C_COMPILER=${FLUXO_HDF5CC} -DCMAKE_Fortran_COMPILER=${FLUXO_HDF5FC} -DBUILD-TESTING=OFF -DHDF5_BUILD_EXAMPLES=OFF -DHDF5_BUILD_TOOLS=OFF -DHDF5_BUILD_FORTRAN=ON -DHDF5_ENABLE_PARALLEL=ON
>     #  BUILD_COMMAND ${MAKE}
>     #)
464a420,421
>   LIST(INSERT HDF5_LIBRARIES 0 ${HDF5_hdf5_fortran_LIBRARY_RELEASE})
>   LIST(REMOVE_DUPLICATES HDF5_LIBRARIES)
548c505
< # collect F90 files of 'dg' directory (non-recursive) in a new list 'dgF90'
---
> 
550d506
< # append F90 files of lifting to 'dgF90'-list
556,587d511
< # append 'dgF90'-list to 'fluxoF90'-list
< LIST(APPEND fluxoF90 ${dgF90})
< 
< IF (FLUXO_AMR)
<   INCLUDE_DIRECTORIES(./src/amr/)
<   FILE(GLOB_RECURSE amrF90 ./src/amr/*.f90)
<   FILE(GLOB_RECURSE amrC   ./src/amr/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/globals/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/globals/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/analyze/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/analyze/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/interpolation/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/interpolation/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/mpi/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/mpi/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/p4est/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/p4est/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/refine/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/refine/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/io_hdf5/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/io_hdf5/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/mesh/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/mesh/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/output/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/output/*.c)
< #  FILE(GLOB amrF90 ./src/amr/hopest/readintools/*.f90)
< #  FILE(GLOB amrC   ./src/amr/hopest/readintools/*.c)
<   LIST(APPEND fluxoF90 ${amrF90})
<   LIST(APPEND fluxoC   ${amrC})
< ENDIF()
590,599c514
< ADD_LIBRARY(fluxolibF90 OBJECT ${fluxoF90} )
< ADD_DEPENDENCIES(fluxolibF90 HDF5)
< SET_TARGET_PROPERTIES(fluxolibF90 PROPERTIES COMPILE_FLAGS ${FLUXO_COMPILE_FLAGS}) 
< LIST(APPEND fluxoobj $<TARGET_OBJECTS:fluxolibF90>)
< IF (fluxoC)
<   ADD_LIBRARY(fluxolibC OBJECT ${fluxoC} )
<   ADD_DEPENDENCIES(fluxolibC HDF5 P4EST)
<   SET_TARGET_PROPERTIES(fluxolibC PROPERTIES COMPILE_FLAGS "-fPIC") # TODO: add C default flags
<   LIST(APPEND fluxoobj $<TARGET_OBJECTS:fluxolibC>)
< ENDIF()
---
> ADD_LIBRARY(fluxolibF90 OBJECT ${fluxoF90} ${dgF90})
601,605c516,522
< ADD_LIBRARY(fluxolib STATIC ${fluxoobj})
< LIST(APPEND fluxodeps fluxolib HDF5)
< IF (FLUXO_AMR)
<   LIST(APPEND fluxodeps P4EST)
< ENDIF()
---
> 
> SET_TARGET_PROPERTIES(fluxolibF90 PROPERTIES COMPILE_FLAGS ${FLUXO_COMPILE_FLAGS}) 
> #ADD_LIBRARY(userblocklib OBJECT ./src/output/read_userblock.c)
> #SET_TARGET_PROPERTIES(userblocklib PROPERTIES LINKER_LANGUAGE C)
> #ADD_LIBRARY(fluxolib STATIC $<TARGET_OBJECTS:fluxolibF90> $<TARGET_OBJECTS:userblocklib>)
> ADD_LIBRARY(fluxolib STATIC $<TARGET_OBJECTS:fluxolibF90> )
> ADD_DEPENDENCIES(fluxolibF90 HDF5)
608c525
< ADD_DEPENDENCIES(fluxo ${fluxodeps})
---
> ADD_DEPENDENCIES(fluxo fluxolib HDF5)
612c529
<   ADD_DEPENDENCIES(fluxo_post ${fluxodeps})
---
>   ADD_DEPENDENCIES(fluxo_post fluxolib HDF5)
637a555,647
> 
> #INSTALL(FILES    ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/userblock.txt DESTINATION bin)
> 
> 
> # =========================================================================
> # USERBLOCK + Preproc_flags
> # =========================================================================
> 
> # A function to get all user defined variables with a specified prefix
> function (getListOfVarsStartingWith _prefix _varResult)
>     GET_CMAKE_PROPERTY(_vars CACHE_VARIABLES)
>     STRING(REGEX MATCHALL "(^|;)${_prefix}[A-Za-z0-9_]*" _matchedVars "${_vars}")
>     SET(${_varResult} ${_matchedVars} PARENT_SCOPE)
> endfunction()
> 
> # A function to get all user defined variables with a specified prefix
> SET(configuration ${CMAKE_Fortran_MODULE_DIRECTORY}/configuration-cmake.f90)
> FILE(WRITE ${configuration} "!This file is included during compilation in fluxo.f90 to show the configuration on the screen output. \n")
> FILE(APPEND ${configuration} "  WRITE(UNIT_stdOut,'(A)') \" THIS IS AN OUTPUT OF THE FLUXO OPTIONS USED IN CMAKE:\" \n")
> GETLISTOFVARSSTARTINGWITH("FLUXO_" fluxoVars)
> FOREACH (_var IN LISTS fluxoVars)
>   GET_PROPERTY(currentHelpString CACHE "${_var}" PROPERTY HELPSTRING)
> #  SET(boolian (${${_var}} STREQUAL "ON" OR ${${_var}} STREQUAL "OFF")) 
> #  IF(${boolian})
> #    #FILE(APPEND ${configuration} "OPTION(${_var} \"${currentHelpString}\" ${${_var}})\n")
> #    FILE(APPEND ${configuration} "  WRITE(UNIT_stdOut,*)  \"   CMAKE,OPTION: ${_var} ${${_var}} \" \n")
> #  ELSE()
>     IF(${_var})
>       STRING(REPLACE "\\" "\\\\" ${_var} ${${_var}})
>     ENDIF()
>     #FILE(APPEND ${configuration} "SET(${_var} \"${${_var}}\" CACHE STRING \"${currentHelpString}\")\n")
>     FILE(APPEND ${configuration} "  WRITE(UNIT_stdOut,'(A18,A30,A3,A40)')  \"   CMAKE-OPTION : \",\" ${_var} \",\" : \",\"${${_var}}\"\n")
> #  ENDIF()
> ENDFOREACH()
> 
> # =========================================================================
> # Add FLUXO2VTK tool
> # =========================================================================
> #add_exec(fluxo2vtk ./src/fluxo2vtk.f90)
> #ADD_DEPENDENCIES(fluxo2vtk fluxolib HDF5)
> 
> # =========================================================================
> # RegressionCheck tool && Examples
> # =========================================================================
> #add_exec(regressioncheck ./regressioncheck/regressioncheck.f90
> #                         ./regressioncheck/regressioncheck_vars.f90
> #                         ./regressioncheck/regressioncheck_build.f90
> #                         ./regressioncheck/regressioncheck_compare.f90
> #                         ./regressioncheck/regressioncheck_run.f90
> #                         ./regressioncheck/regressioncheck_tools.f90 )
> #ADD_DEFINITIONS(-DH5DIFF="${HDF5_DIFF_EXECUTABLE}")
> #SET(FLUXO_REGRESSIONCHECK_EXAMPLES "${CMAKE_CURRENT_SOURCE_DIR}/regressioncheck/examples")
> 
> 
> # =========================================================================
> # Ctags
> # =========================================================================
> #SET(EQNS_WO_ACTUAL ${EQNSYSTEMS})
> #LIST(REMOVE_ITEM EQNS_WO_ACTUAL ${FLUXO_EQNSYSNAME})
> #SET(EXLUDES "")
> #FOREACH(item ${EQNS_WO_ACTUAL})
> #   SET(EXLUDES "--exclude=src/equations/${item}/*" ${EXLUDES})
> #ENDFOREACH()
> #SET(LIFTINGS_WO_ACTUAL ${LIFTINGS})
> #LIST(REMOVE_ITEM LIFTINGS_WO_ACTUAL ${FLUXO_PARABOLIC_LIFTING})
> #FOREACH(item ${LIFTINGS_WO_ACTUAL})
> #   SET(EXLUDES "--exclude=src/dg/${item}/*" ${EXLUDES})
> #ENDFOREACH()
> #SET(TESTCASES_WO_ACTUAL ${TESTCASES})
> #LIST(REMOVE_ITEM TESTCASES_WO_ACTUAL ${FLUXO_TESTCASE})
> #FOREACH(item ${TESTCASES_WO_ACTUAL})
> #   SET(EXLUDES "--exclude=src/testcase/${item}/*" ${EXLUDES})
> #ENDFOREACH()
> #ADD_CUSTOM_COMMAND(OUTPUT ctags.txt COMMAND cd ${CMAKE_CURRENT_SOURCE_DIR} && ctags -R --fortran-kinds=+i+L -f ctags.txt ${EXLUDES} src)
> #ADD_CUSTOM_TARGET(tags DEPENDS ctags.txt)
> #FIND_PROGRAM(CTAGS_PATH ctags)
> #IF(CTAGS_PATH)
> #    MESSAGE(STATUS "Found ctags: ${CTAGS_PATH}")
> #    ADD_DEPENDENCIES(fluxo tags)
> #ENDIF(CTAGS_PATH)
> 
> # =========================================================================
> # Tests
> # =========================================================================
> 
> # Deactivate tests on hornet since no programs are allowed to run on frontend
> #IF(ONHORNET GREATER -1)
> #  SET(FLUXO_UNITTESTS OFF CACHE BOOL "Enable unit tests after build" FORCE)
> #ENDIF()
> #IF(FLUXO_UNITTESTS)
> #  INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/unitTests/CMakeLists.txt)
> #ENDIF()
> 
